### Step 1.3: Database Schema and Migration System
**Detailed Prompt for Replit Agent:**
```
Create a robust PostgreSQL database schema with migration system:

MIGRATION SYSTEM (src/database/migrate.ts):
Build a migration runner that:
- Reads SQL files from src/database/migrations in alphabetical order
- Tracks applied migrations in a migrations table
- Supports up and down migrations
- Wraps each migration in a transaction
- Provides rollback capability
- Logs migration status and timing

CORE SCHEMA TABLES:

1. Users Table (001_create_users.sql):
   CREATE TABLE users (
     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
     email VARCHAR(255) UNIQUE NOT NULL,
     username VARCHAR(50) UNIQUE NOT NULL,
     password_hash VARCHAR(255) NOT NULL,
     email_verified BOOLEAN DEFAULT false,
     email_verification_token VARCHAR(64),
     status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'suspended', 'banned')),
     role VARCHAR(20) DEFAULT 'user' CHECK (role IN ('user', 'moderator', 'admin')),
     created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
     updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
     last_login TIMESTAMP WITH TIME ZONE,
     metadata JSONB DEFAULT '{}'::jsonb
   );
   
   CREATE INDEX idx_users_email ON users(LOWER(email));
   CREATE INDEX idx_users_username ON users(LOWER(username));
   CREATE INDEX idx_users_status ON users(status) WHERE status != 'active';

2. User Security Table (002_create_user_security.sql):
   CREATE TABLE user_security (
     user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
     login_attempts INTEGER DEFAULT 0,
     last_attempt_at TIMESTAMP WITH TIME ZONE,
     locked_until TIMESTAMP WITH TIME ZONE,
     two_factor_enabled BOOLEAN DEFAULT false,
     two_factor_secret VARCHAR(255),
     recovery_codes TEXT[],
     password_changed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
     must_change_password BOOLEAN DEFAULT false
   );

3. Audit Log Table (003_create_audit_log.sql):
   CREATE TABLE audit_log (
     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
     user_id UUID REFERENCES users(id) ON DELETE SET NULL,
     action VARCHAR(50) NOT NULL,
     resource_type VARCHAR(50),
     resource_id VARCHAR(255),
     changes JSONB,
     ip_address INET,
     user_agent TEXT,
     created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   );
   
   CREATE INDEX idx_audit_user ON audit_log(user_id);
   CREATE INDEX idx_audit_created ON audit_log(created_at DESC);

4. Sessions Table (004_create_sessions.sql):
   CREATE TABLE user_sessions (
     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
     user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
     refresh_token_id UUID UNIQUE NOT NULL,
     ip_address INET,
     user_agent TEXT,
     expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
     created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
     last_active TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   );
   
   CREATE INDEX idx_sessions_user ON user_sessions(user_id);
   CREATE INDEX idx_sessions_token ON user_sessions(refresh_token_id);
   CREATE INDEX idx_sessions_expires ON user_sessions(expires_at);

DATABASE CONNECTION (src/database/index.ts):
- Create connection pool with min 2, max 10 connections
- Implement connection retry logic with exponential backoff
- Add query logging in development mode
- Create typed query functions with parameterized queries
- Implement transaction helper with automatic rollback
- Add connection health check endpoint
- Monitor slow queries (>1000ms)

REPOSITORY PATTERN:
Create BaseRepository class with:
- Generic CRUD operations
- Pagination support
- Filtering and sorting
- Soft delete functionality
- Audit trail integration
- Connection pool management

Include proper error handling, connection cleanup, and TypeScript types for all database operations.
